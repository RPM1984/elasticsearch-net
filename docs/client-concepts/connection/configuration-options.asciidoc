:ref_current: https://www.elastic.co/guide/en/elasticsearch/reference/master

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/master/src/Tests/Tests/ClientConcepts/Connection/ConfigurationOptions.doc.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[configuration-options]]
=== Configuration options

Connecting to Elasticsearch with <<elasticsearch-net-getting-started,Elasticsearch.Net>> and <<nest-getting-started,NEST>> is easy, but
it's entirely possible that you'd like to change the default connection behaviour. There are a number of configuration options available
on `ConnectionConfiguration` for the low level client and `ConnectionSettings` for the high level client that can be used to control
how the clients interact with Elasticsearch.

==== Options on ConnectionConfiguration

The following is a list of available connection configuration options on `ConnectionConfiguration`; since
`ConnectionSettings` derives from `ConnectionConfiguration`, these options are available for both
the low level and high level client:

`Authentication`::

`ClientCertificate`::

`ClientCertificates`::

`ConnectionLimit`::

`DeadTimeout`::

`DisableAutomaticProxyDetection`::

`DisableDirectStreaming`::

`DisablePing`::

`DnsRefreshTimeout`::

`EnableDebugMode`::

Turns on settings that aid in debugging like DisableDirectStreaming() and PrettyJson() so that the original request and response JSON can be inspected. It also always asks the server for the full stack trace on errors

`EnableHttpCompression`::

`EnableHttpPipelining`::

`EnableTcpKeepAlive`::

Sets the keep-alive option on a TCP connection.
+
For Desktop CLR, sets ServicePointManager.SetTcpKeepAlive

`EnableTcpStats`::

>

`GlobalHeaders`::

`GlobalQueryStringParameters`::

`MaxDeadTimeout`::

`MaximumRetries`::

`MaxRetryTimeout`::

`MemoryStreamFactory`::

`NodePredicate`::

`OnRequestCompleted`::

`OnRequestDataCreated`::

`PingTimeout`::

`PrettyJson`::

`Proxy`::

If your connection has to go through proxy, use this method to specify the proxy url

`RequestTimeout`::

`ServerCertificateValidationCallback`::

`SkipDeserializationForStatusCodes`::

`SniffLifeSpan`::

`SniffOnConnectionFault`::

`SniffOnStartup`::

`ThrowExceptions`::

`TransferEncodingChunked`::

`UserAgent`::

:xml-docs: Elastic.Transport:TransportConfigurationBase`1

==== ConnectionConfiguration with ElasticLowLevelClient

Here's an example to demonstrate setting several configuration options using the low level client

[source,csharp]
----
var connectionConfiguration = new ConnectionConfiguration()
    .DisableAutomaticProxyDetection()
    .EnableHttpCompression()
    .DisableDirectStreaming()
    .PrettyJson()
    .RequestTimeout(TimeSpan.FromMinutes(2));

var lowLevelClient = new ElasticLowLevelClient(connectionConfiguration);
----

==== Options on ConnectionSettings

The following is a list of available connection configuration options on `ConnectionSettings`:

`DefaultDisableIdInference`::

Disables automatic Id inference for given CLR types.
+
NEST by default will use the value of a property named Id on a CLR type as the _id to send to Elasticsearch. Adding a type will disable this behaviour for that CLR type. If Id inference should be disabled for all CLR types, use `DefaultDisableIdInference`

`DefaultFieldNameInferrer`::

Specifies how field names are inferred from CLR property names.
+
By default, NEST camel cases property names. For example, CLR property EmailAddress will be inferred as "emailAddress" Elasticsearch document field name

`DefaultIndex`::

The default index to use for a request when no index has been explicitly specified and no default indices are specified for the given CLR type specified for the request.

`DefaultMappingFor`::

Specify how the mapping is inferred for a given CLR type. The mapping can infer the index, id and relation name for a given CLR type, as well as control serialization behaviour for CLR properties.

:xml-docs: Nest:ConnectionSettingsBase`1

==== ConnectionSettings with ElasticClient

Here's an example to demonstrate setting several configuration options using the high level client

[source,csharp]
----
var connectionSettings = new ConnectionSettings()
    .DefaultMappingFor<Project>(i => i
        .IndexName("my-projects")
        .IdProperty(p => p.Name)
    )
    .EnableDebugMode()
    .PrettyJson()
    .RequestTimeout(TimeSpan.FromMinutes(2));

var client = new ElasticClient(connectionSettings);
----

[NOTE]
====
Basic Authentication credentials can alternatively be specified on the node URI directly

[source,csharp]
----
var uri = new Uri("http://username:password@localhost:9200");
var settings = new ConnectionConfiguration(uri);
----

but this can be awkward when using connection pooling with multiple nodes, especially when the connection pool
used is one that is capable of reseeding itself. For this reason, we'd recommend specifying credentials
on `ConnectionSettings`.

====

